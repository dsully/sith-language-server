[workspace.package]
version = "0.2.4-alpha"
edition = "2021"
repository = "https://github.com/LaBatata101/sith-language-server"
authors = ["LaBatata101 <labatata101@gmail.com>"]
readme = "README.md"
license = "MIT"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[workspace]
members = ["crates/*"]
resolver = "2"

[workspace.dependencies]
sith_lsp = { path = "crates/sith_lsp" }
ruff_text_size = { path = "crates/ruff_text_size", package = "ruff_text_size" }
ruff_index = { path = "crates/ruff_index", package = "ruff_index" }
ruff_source_file = { path = "crates/ruff_source_file", package = "ruff_source_file" }
sith_python_ast = { path = "crates/sith_python_ast", package = "sith_python_ast" }
sith_python_parser = { path = "crates/sith_python_parser", package = "sith_python_parser" }
sith_server = { path = "crates/sith_server", package = "sith_server" }
sith_semantic_model = { path = "crates/sith_semantic_model", package = "sith_semantic_model" }
ruff_python_resolver = { path = "crates/ruff_python_resolver", package = "ruff_python_resolver" }
sith_python_ast_utils = { path = "crates/sith_python_ast_utils", package = "sith_python_ast_utils" }
sith_python_utils = { path = "crates/sith_python_utils", package = "sith_python_utils" }
lsp-types = { path = "crates/lsp-types", features = ["proposed"] }

bitflags = "2.4.1"
encoding_rs = "0.8.32"
static_assertions = "1.1.0"
unicode-ident = "1.0.11"
unicode_names2 = "1.2.1"
unicode-normalization = "0.1.23"
itertools = "0.11.0"
memchr = "2.6.4"
ignore = "0.4.22"
tracing = "0.1.40"
anyhow = "1.0.81"
tracing-tree = "0.3.0"
tracing-subscriber = "0.3.18"
serde = { version = "1.0.197", features = ["derive"] }
serde_json = "1.0.113"
schemars = "0.8.12"
once_cell = "1.18.0"
crossbeam = "0.8.4"
jod-thread = "0.1.2"
libc = "0.2.153"
lsp-server = "0.7.6"
rustc-hash = "2.0.0" 
log = "0.4.17" 
proc-macro2 = "1.0"
syn = { version = "2.0",  features = ["derive", "parsing", "extra-traits", "full"] }
quote = "1.0"
criterion = { version = "0.5.1" }
is-macro = "0.3.4"
compact_str = { version = "0.8.0", features = ["serde"] }
rayon = "1.10.0"
bstr = "1.10.0"
walkdir = { version = "2.3.2" }
shellexpand = { version = "3.0.0" }
zip = { version = "0.6.6", default-features = false, features = ["zstd"] }
path-slash = { version = "0.2.1" }
directories = "5.0.1"
indexmap = "2.7.0"
bimap = "0.6.3"
dirs = "6.0.0"
toml = "0.8.20"
base64 = "0.22.1"
sha2 = "0.10.8"
regex = "1.11.1"

[profile.release]
strip = true
lto = true
codegen-units = 1

[profile.profiling]
inherits = "release"
strip = false
debug = true

[profile.dev.package.insta]
opt-level = 3

[profile.dev.package.similar]
opt-level = 3

# The profile that 'dist' will build with
[profile.dist]
inherits = "release"

# Config for 'dist'
[workspace.metadata.dist]
# The preferred dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.28.0"
# CI backends to support
ci = "github"
# The installers to generate for each app
installers = ["shell", "powershell"]
# The archive format to use for windows builds (defaults .zip)
windows-archive = ".zip"
# The archive format to use for non-windows builds (defaults .tar.xz)
unix-archive = ".tar.gz"
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
    "aarch64-apple-darwin",
    "aarch64-unknown-linux-gnu",
    "aarch64-unknown-linux-musl",
    "aarch64-pc-windows-msvc",
    "x86_64-apple-darwin",
    "x86_64-unknown-linux-gnu",
    "x86_64-unknown-linux-musl",
    "x86_64-pc-windows-msvc"
]
# Whether to auto-include files like READMEs, LICENSEs, and CHANGELOGs (default true)
auto-includes = false
# Whether dist should create a Github Release or use an existing draft
create-release = true
# Which actions to run on pull requests
pr-run-mode = "skip"
# Which phase dist should use to create the GitHub release
github-release = "announce"
# Whether CI should include auto-generated code to build local artifacts
build-local-artifacts = true
# Local artifacts jobs to run in CI
local-artifacts-jobs = ["./build-vscode-extension"]
# Whether to install an updater program
install-updater = false
# Path that installers should place binaries in
install-path = ["$XDG_BIN_HOME/", "$XDG_DATA_HOME/../bin", "~/.local/bin"]
